// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/que_user.dart';
import 'models/task.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3523354962780544442),
      name: 'Task',
      lastPropertyId: const IdUid(13, 7220904931335944677),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6110751161206709561),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1188803391374408319),
            name: 'taskId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 9082580250178685122)),
        ModelProperty(
            id: const IdUid(3, 2714772534337005993),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8406296474655244287),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1784484243739293398),
            name: 'timeUnit',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5268670426386637546),
            name: 'timeValue',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1131428622371534277),
            name: 'assignee',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8322598314886066668),
            name: 'assignedTo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8607785878012646010),
            name: 'createdOn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1132349683810245614),
            name: 'priority',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 9206772069463147735),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8796882751393717504),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7220904931335944677),
            name: 'isNotified',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3002427532839356135),
      name: 'QueUser',
      lastPropertyId: const IdUid(9, 605967604994737938),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 695977339921948808),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2624647766619991511),
            name: 'queUserId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(2, 1129167188674907085)),
        ModelProperty(
            id: const IdUid(3, 7427872741697197612),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4344367427753372939),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8313634373492723169),
            name: 'mobileNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 252152814127440514),
            name: 'photoUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 681857862778930290),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2774035008098866372),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 605967604994737938),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3002427532839356135),
      lastIndexId: const IdUid(2, 1129167188674907085),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Task: EntityDefinition<Task>(
        model: _entities[0],
        toOneRelations: (Task object) => [],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final taskIdOffset = fbb.writeString(object.taskId);
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final assigneeOffset = fbb.writeString(object.assignee);
          final assignedToOffset = fbb.writeString(object.assignedTo);
          final priorityOffset = fbb.writeString(object.priority);
          final statusOffset = fbb.writeString(object.status);
          final companyOffset = fbb.writeString(object.company);
          fbb.startTable(14);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, taskIdOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.timeUnit);
          fbb.addInt64(5, object.timeValue);
          fbb.addOffset(6, assigneeOffset);
          fbb.addOffset(7, assignedToOffset);
          fbb.addInt64(8, object.createdOn.millisecondsSinceEpoch);
          fbb.addOffset(9, priorityOffset);
          fbb.addOffset(10, statusOffset);
          fbb.addOffset(11, companyOffset);
          fbb.addBool(12, object.isNotified);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Task(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              taskId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              timeUnit:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              timeValue:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              assignee: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              assignedTo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              createdOn:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              priority: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              status: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              company: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              isNotified: const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false));

          return object;
        }),
    QueUser: EntityDefinition<QueUser>(
        model: _entities[1],
        toOneRelations: (QueUser object) => [],
        toManyRelations: (QueUser object) => {},
        getId: (QueUser object) => object.id,
        setId: (QueUser object, int id) {
          object.id = id;
        },
        objectToFB: (QueUser object, fb.Builder fbb) {
          final queUserIdOffset = fbb.writeString(object.queUserId);
          final emailOffset = fbb.writeString(object.email);
          final displayNameOffset = fbb.writeString(object.displayName);
          final mobileNoOffset = fbb.writeString(object.mobileNo);
          final photoUrlOffset = fbb.writeString(object.photoUrl);
          final companyOffset = fbb.writeString(object.company);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, queUserIdOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, displayNameOffset);
          fbb.addOffset(4, mobileNoOffset);
          fbb.addOffset(5, photoUrlOffset);
          fbb.addOffset(6, companyOffset);
          fbb.addOffset(7, roleOffset);
          fbb.addInt64(8, object.color);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = QueUser(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              queUserId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              displayName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              mobileNo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              photoUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              company: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              role: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              color: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// see [Task.taskId]
  static final taskId = QueryStringProperty<Task>(_entities[0].properties[1]);

  /// see [Task.title]
  static final title = QueryStringProperty<Task>(_entities[0].properties[2]);

  /// see [Task.description]
  static final description =
      QueryStringProperty<Task>(_entities[0].properties[3]);

  /// see [Task.timeUnit]
  static final timeUnit =
      QueryIntegerProperty<Task>(_entities[0].properties[4]);

  /// see [Task.timeValue]
  static final timeValue =
      QueryIntegerProperty<Task>(_entities[0].properties[5]);

  /// see [Task.assignee]
  static final assignee = QueryStringProperty<Task>(_entities[0].properties[6]);

  /// see [Task.assignedTo]
  static final assignedTo =
      QueryStringProperty<Task>(_entities[0].properties[7]);

  /// see [Task.createdOn]
  static final createdOn =
      QueryIntegerProperty<Task>(_entities[0].properties[8]);

  /// see [Task.priority]
  static final priority = QueryStringProperty<Task>(_entities[0].properties[9]);

  /// see [Task.status]
  static final status = QueryStringProperty<Task>(_entities[0].properties[10]);

  /// see [Task.company]
  static final company = QueryStringProperty<Task>(_entities[0].properties[11]);

  /// see [Task.isNotified]
  static final isNotified =
      QueryBooleanProperty<Task>(_entities[0].properties[12]);
}

/// [QueUser] entity fields to define ObjectBox queries.
class QueUser_ {
  /// see [QueUser.id]
  static final id = QueryIntegerProperty<QueUser>(_entities[1].properties[0]);

  /// see [QueUser.queUserId]
  static final queUserId =
      QueryStringProperty<QueUser>(_entities[1].properties[1]);

  /// see [QueUser.email]
  static final email = QueryStringProperty<QueUser>(_entities[1].properties[2]);

  /// see [QueUser.displayName]
  static final displayName =
      QueryStringProperty<QueUser>(_entities[1].properties[3]);

  /// see [QueUser.mobileNo]
  static final mobileNo =
      QueryStringProperty<QueUser>(_entities[1].properties[4]);

  /// see [QueUser.photoUrl]
  static final photoUrl =
      QueryStringProperty<QueUser>(_entities[1].properties[5]);

  /// see [QueUser.company]
  static final company =
      QueryStringProperty<QueUser>(_entities[1].properties[6]);

  /// see [QueUser.role]
  static final role = QueryStringProperty<QueUser>(_entities[1].properties[7]);

  /// see [QueUser.color]
  static final color =
      QueryIntegerProperty<QueUser>(_entities[1].properties[8]);
}
